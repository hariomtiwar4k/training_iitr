# -*- coding: utf-8 -*-
"""day 2c d0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F2exNxgYxuFW1eypgQhXXEFT_cvCXaDi
"""



print("Umang")   ### shift + enter

##### Numpy Basics

import numpy as np

#### Create an array using numpy (1 D Array)
a = np.array([1,2,3,4,5,6,7])
a

#### Create an array using numpy (2 D Array)
a = np.array([[1,2,3,4,5],[3,4,5,6,7],[1,2,8,9,10]])
a

a.shape

a.ndim    ### no. od dimensions

a.size   ## no. of elements

#### Create an array using numpy (3 D Array)
a3 = np.array([[[1,2,3,4,5],[3,4,5,6,7],[1,2,8,9,10]]])
a3

len(a)

len(a3)

#### Create an array using numpy (3 D Array)
a4 = np.array([[[1,2,3,4,5],[3,4,5,6,7],[1,2,8,9,10]],
               [[1,2,3,4,5],[3,4,5,6,7],[1,2,8,9,10]]])
a4

len(a4)

##### Picking element from the array
a

a[1]

a[2]

a[1,1]

a[1][1]

a[:]

a[1:]

a[1:2]

a[1:3]

a

a[:,1]

a[:,1:4]

a4

a4[0]

a4[0][1]

a4[0][1][2]

a

a.shape

a.reshape(5,3)    ###

a.reshape(15,1)

a.reshape(1,15)

a

a.mean()

a.max()

a.min()

a.argmax()

a.argmin()

a.sum()

a

a.sum(axis=1)  ### row wise sum

a.sum(axis=0)  ### columns wise sum

#### Zero Matrix
zeros = np.zeros((5,5))
zeros

#### Ones Matrix
ones = np.ones((5,5))
ones

ones.dtype

ones = ones.astype('int')
ones

### generate some equidistant between a range
np.linspace(1,100,30)

### generate some equidistant between a range
a = np.linspace(1,50,50)
a = a.astype('int')
a

np.arange(1,101,3)

np.arange(1,100,3.5)

#### Random numbers
np.random.randint(10,100)

np.random.randint(10,100,10)

np.random.seed(90)
np.random.randint(10,100,10)

np.random.seed(2)
np.random.randint(10,200,(3,3))

np.random.uniform(10,100,10)

np.random.randint(0,2,(5,5))

### identity matrix
i = np.identity(5)
i

###############################################

#### Pandas Basics (Series | DataFrame)

#### Series
#### 1. It is a kind of a array where the index is attached to the data
#### 2. It provides a sequence to the data
#### 3. It holds data like list,array,tuple and dictionary

import pandas as pd

#### Create a series
marks = [100,90,80,99,75]
s1 = pd.Series(marks)
s1

#### Create a series
marks = [100,90,80,99,75]
sub = ("Maths","Science","SST","Hindi","EVS")
s1 = pd.Series(marks,index=sub)
s1

dict = {"Maths":90,"Drawing":80,"IT":90,"Science":85,"SST":100,"English":95}
s2 = pd.Series(dict)
s2

s3 = s1 + s2
s3

s3.head()

s3.tail()

s3.head(2)

s3

s3.iloc[5]

s3.loc["Maths"]

s3.sort_values()  ### ascending order

s3.sort_values(ascending=False)  ### ascending order

s3.sort_values(ascending=False,na_position='first')  ### ascending order

df = pd.DataFrame(s3)
df

df = df.reset_index()
df

df.rename(columns={"index":"subjects",0:"marks"},inplace=True)
df

df['School Name']="DPS Delhi"
df

df["Teacher Name"] = [" mr x ","mr y ","mr z ","mr a","mr b","mr c","mr dd","mr e"]
df

df[["subjects","Teacher Name"]]

df["marks"] = df['marks'].fillna(80)
df

df.iloc[2][0]

grade = []
for i in range(0,len(df)):
    marks = df.iloc[i]["marks"]
    if marks > 100:
      grade.append("A")
    else:
      grade.append("B")

df['grade'] =  grade
df

df= df.reset_index()
df

df.drop(["index"],axis=1,inplace=True)
df

s = df[df['subjects']=="science"].index[0]
df.drop([s],axis=0,inplace=True)
df

df = df.replace(to_replace = "mr dd",value="mr bean")
df

##Export glo excel/csv
df.to_excel("data.xlsx")

data = pd.read_excel("data.xlsx")
data.head()

